// backend/testDb.js
const { sequelize, User } = require('./models');

async function testDatabase() {
    try {
        console.log('üîÑ Test de connexion √† la base de donn√©es...');
        
        // Test de connexion
        await sequelize.authenticate();
        console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie.');
        
        // Test de synchronisation des mod√®les
        await sequelize.sync();
        console.log('‚úÖ Synchronisation des mod√®les r√©ussie.');
        
        // Test de cr√©ation d'un utilisateur de test
        console.log('üîÑ Test de cr√©ation d\'utilisateur...');
        
        // Supprimer l'utilisateur de test s'il existe
        await User.destroy({ where: { email: 'test@example.com' } });
        
        const testUser = await User.create({
            firstName: 'Test',
            lastName: 'User',
            email: 'test@example.com',
            password: 'testpassword123',
            isAdmin: false,
            isSubscribed: false
        });
        
        console.log('‚úÖ Utilisateur de test cr√©√©:', {
            id: testUser.id,
            email: testUser.email,
            firstName: testUser.firstName,
            hashedPassword: testUser.password.substring(0, 20) + '...'
        });
        
        // Test de recherche
        const foundUser = await User.findOne({ where: { email: 'test@example.com' } });
        console.log('‚úÖ Utilisateur trouv√©:', foundUser ? foundUser.email : 'Non trouv√©');
        
        // Test de comparaison de mot de passe
        if (foundUser) {
            const isMatch = await foundUser.comparePassword('testpassword123');
            console.log('‚úÖ Test de comparaison de mot de passe:', isMatch ? 'SUCC√àS' : '√âCHEC');
            
            const isWrongMatch = await foundUser.comparePassword('wrongpassword');
            console.log('‚úÖ Test avec mauvais mot de passe:', isWrongMatch ? '√âCHEC (probl√®me)' : 'SUCC√àS');
        }
        
        // Nettoyer
        await User.destroy({ where: { email: 'test@example.com' } });
        console.log('‚úÖ Utilisateur de test supprim√©.');
        
        // Lister tous les utilisateurs
        const allUsers = await User.findAll();
        console.log(`üìä Nombre total d'utilisateurs dans la DB: ${allUsers.length}`);
        
        allUsers.forEach(user => {
            console.log(`   - ${user.email} (ID: ${user.id}, Admin: ${user.isAdmin})`);
        });
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
        console.error('Type d\'erreur:', error.name);
        console.error('Message:', error.message);
        
        if (error.name === 'SequelizeConnectionError') {
            console.error('üîç V√©rifiez:');
            console.error('   - MySQL est-il d√©marr√© ?');
            console.error('   - La base de donn√©es "flexvision_db" existe-t-elle ?');
            console.error('   - Les identifiants dans config.json sont-ils corrects ?');
        }
    } finally {
        await sequelize.close();
        console.log('üîí Connexion ferm√©e.');
    }
}

// Ex√©cuter le test
testDatabase();